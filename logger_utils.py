import logging
import os
from logging.handlers import RotatingFileHandler, QueueHandler, QueueListener
import json
import queue
import httpx

class TelegramErrorHandler(logging.Handler):
    """
    –õ–æ–≥–≥–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ Telegram.
    """
    def __init__(self, bot_token, chat_id, level=logging.ERROR):
        super().__init__(level)
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

    def emit(self, record):
        try:
            log_entry = self.format(record)
            message = f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{log_entry}"
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            with httpx.Client() as client:
                response = client.post(self.api_url, json=payload)
                if response.status_code != 200:
                    print(f"[–ö–†–û–¢]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
        except Exception as e:
            print(f"[–ö–†–û–¢]: –û—à–∏–±–∫–∞ –≤ TelegramErrorHandler: {e}")


def setup_logging(
    log_file="logs.log",
    log_level=logging.INFO,
    max_bytes=5 * 1024 * 1024,
    backup_count=5,
    json_format=False,
    use_queue=False,
    telegram_bot_token=None,
    telegram_chat_id=None
):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ö–†–û–¢".
    –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π, –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ñ–æ—Ä–º–∞—Ç JSON –∏
    –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ QueueHandler.

    :param log_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤.
    :param log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO).
    :param max_bytes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ –¥–æ —Ä–æ—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 MB).
    :param backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5).
    :param json_format: –ï—Å–ª–∏ True, –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    :param use_queue: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è QueueHandler –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    :param telegram_bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫.
    :param telegram_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫.
    :return: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ "–ö–†–û–¢".
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        try:
            os.makedirs(log_dir)
            print(f"[–ö–†–û–¢]: –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: {log_dir}")
        except Exception as e:
            print(f"[–ö–†–û–¢]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤: {e}")
            raise

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    if json_format:
        formatter = JsonFormatter()
    else:
        formatter = logging.Formatter(
            fmt="%(asctime)s - [–ö–†–û–¢] - %(name)s - %(levelname)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S"
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
    rotating_handler = RotatingFileHandler(
        log_file, maxBytes=max_bytes, backupCount=backup_count
    )
    rotating_handler.setFormatter(formatter)

    # –û—á–µ—Ä–µ–¥—å –¥–ª—è QueueHandler (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    log_queue = queue.Queue(-1) if use_queue else None

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger('KROT')
    logger.setLevel(log_level)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    if logger.hasHandlers():
        logger.handlers.clear()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if use_queue:
        queue_handler = QueueHandler(log_queue)
        logger.addHandler(queue_handler)

        # –ó–∞–ø—É—Å–∫ QueueListener
        listener = QueueListener(log_queue, rotating_handler)
        listener.start()
    else:
        logger.addHandler(rotating_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console_handler = logging.StreamHandler()
    console_handler.setLevel(log_level)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TelegramErrorHandler (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏ —á–∞—Ç —É–∫–∞–∑–∞–Ω—ã)
    if telegram_bot_token and telegram_chat_id:
        telegram_handler = TelegramErrorHandler(
            bot_token=telegram_bot_token,
            chat_id=telegram_chat_id
        )
        telegram_handler.setFormatter(formatter)
        logger.addHandler(telegram_handler)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info(f"[–ö–†–û–¢]: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_file}")

    return logger


# –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            'time': self.formatTime(record, self.datefmt),
            'level': record.levelname,
            'message': record.getMessage(),
            'logger': record.name,
        }
        if record.exc_info:
            log_record['exception'] = self.formatException(record.exc_info)
        return json.dumps(log_record)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "–ö–†–û–¢"
if __name__ == "__main__":
    # –í–∫–ª—é—á–∞–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è "–ö–†–û–¢"
    TELEGRAM_BOT_TOKEN = "–≤–∞—à_telegram_bot_token"
    TELEGRAM_CHAT_ID = "–≤–∞—à_telegram_chat_id"

    logger = setup_logging(
        log_level=logging.DEBUG,
        json_format=True,
        use_queue=True,
        telegram_bot_token=TELEGRAM_BOT_TOKEN,
        telegram_chat_id=TELEGRAM_CHAT_ID
    )

    # –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤
    try:
        logger.info("[–ö–†–û–¢] –ü—Ä–∏–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        logger.warning("[–ö–†–û–¢] –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        logger.error("[–ö–†–û–¢] –ü—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∏.")
        raise ValueError("–¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤")
    except Exception as e:
        logger.exception("[–ö–†–û–¢] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")