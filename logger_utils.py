import logging
import os
import json
import queue
from logging.handlers import RotatingFileHandler, QueueHandler, QueueListener
import httpx


class TelegramErrorHandler(logging.Handler):
    """
    –õ–æ–≥–≥–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ Telegram.
    """
    def __init__(self, bot_token, chat_id, level=logging.ERROR):
        super().__init__(level)
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

    def emit(self, record):
        try:
            log_entry = self.format(record)
            message = f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{log_entry}"
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            with httpx.Client() as client:
                response = client.post(self.api_url, json=payload)
                if response.status_code != 200:
                    print(f"[–ö–†–û–¢]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
        except Exception as e:
            print(f"[–ö–†–û–¢]: –û—à–∏–±–∫–∞ –≤ TelegramErrorHandler: {e}")


class JsonFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    def format(self, record):
        log_record = {
            'time': self.formatTime(record, self.datefmt),
            'level': record.levelname,
            'message': record.getMessage(),
            'logger': record.name,
        }
        if record.exc_info:
            log_record['exception'] = self.formatException(record.exc_info)
        return json.dumps(log_record)


def setup_logging(
    log_file="logs.log",
    log_level=logging.INFO,
    max_log_lines=200000,
    average_line_length=100,
    backup_count=0,
    json_format=False,
    use_queue=True,
    telegram_bot_token=None,
    telegram_chat_id=None
):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º:
      ‚Ä¢ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ (max_log_lines) –∏ —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ (average_line_length);
      ‚Ä¢ –æ—á–µ—Ä–µ–¥–∏ (QueueHandler/QueueListener) –ø—Ä–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ (use_queue);
      ‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ telegram_bot_token –∏ telegram_chat_id);
      ‚Ä¢ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ JSON-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (json_format).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      log_file          : –ò–º—è —Ñ–∞–π–ª–∞, –∫—É–¥–∞ –ø–∏—à—É—Ç—Å—è –ª–æ–≥–∏.
      log_level         : –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO).
      max_log_lines     : –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Ä–æ—Ç–∞—Ü–∏—è.
      average_line_length: –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è maxBytes.
      backup_count      : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ª–æ–≥-—Ñ–∞–π–ª–æ–≤.
      json_format       : –ï—Å–ª–∏ True, –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
      use_queue         : –ï—Å–ª–∏ True, –≤–∫–ª—é—á–∞–µ—Ç—Å—è QueueHandler/QueueListener –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
      telegram_bot_token: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ —á–∞—Ç.
      telegram_chat_id  : ID —á–∞—Ç–∞ –≤ Telegram, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      –û–±—ä–µ–∫—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ (root logger) —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏.
    """

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å—Ç—Ä–æ–∫–∞
    if telegram_bot_token is not None and not isinstance(telegram_bot_token, str):
        raise TypeError("–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = os.path.dirname(log_file)
    if log_dir and not os.path.exists(log_dir):
        try:
            os.makedirs(log_dir)
        except Exception as e:
            print(f"[–ö–†–û–¢]: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤: {e}")
            raise

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
    max_bytes = max_log_lines * average_line_length

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
    if json_format:
        formatter = JsonFormatter()
    else:
        formatter = logging.Formatter(
            fmt="%(asctime)s - [–ö–†–û–¢] - %(name)s - %(levelname)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S"
        )

    # –°–æ–∑–¥–∞—ë–º —Ä–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    rotating_handler = RotatingFileHandler(
        filename=log_file,
        maxBytes=max_bytes,
        backupCount=backup_count,
        encoding="utf-8"
    )
    rotating_handler.setFormatter(formatter)
    rotating_handler.setLevel(log_level)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä (root logger)
    logger = logging.getLogger()  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    logger.setLevel(log_level)

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if logger.hasHandlers():
        logger.handlers.clear()

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(log_level)
    logger.addHandler(console_handler)
    logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram
    if telegram_bot_token and telegram_chat_id:
        telegram_handler = TelegramErrorHandler(
            bot_token=telegram_bot_token,
            chat_id=telegram_chat_id,
            level=logging.ERROR  # –õ–∏—à—å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        )
        telegram_handler.setFormatter(formatter)
        logger.addHandler(telegram_handler)

    # –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ (–¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏)
    if use_queue:
        log_queue = queue.Queue(-1)
        queue_handler = QueueHandler(log_queue)
        # QueueListener –±—É–¥–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–∏—Å–∞—Ç—å –≤ rotating_handler
        listener = QueueListener(log_queue, rotating_handler)
        listener.start()
        logger.addHandler(queue_handler)
    else:
        # –ò–Ω–∞—á–µ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É–µ–º rotating_handler
        logger.addHandler(rotating_handler)

    logger.info(
        "[–ö–†–û–¢]: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. "
        f"–§–∞–π–ª: {log_file}, maxBytes‚âà{max_bytes}, backupCount={backup_count}"
    )

    return logger


# –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
if __name__ == "__main__":
    logger = setup_logging(
        log_file="logs.log",
        log_level=logging.DEBUG,
        max_log_lines=200000,
        average_line_length=100,
        backup_count=3,
        json_format=False,
        use_queue=True,
        telegram_bot_token="your_bot_token",
        telegram_chat_id="your_chat_id"
    )
    logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥.")
    logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")